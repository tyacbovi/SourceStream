/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.sourcestream.entities;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This is a schema for entity detection report event */
@org.apache.avro.specific.AvroGenerated
public class detectionEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8156306307721202944L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"detectionEvent\",\"namespace\":\"org.sourcestream.entities\",\"doc\":\"This is a schema for entity detection report event\",\"fields\":[{\"name\":\"sourceName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"interface name\"},{\"name\":\"externalSystemID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"external system ID\"},{\"name\":\"dataOffset\",\"type\":\"long\",\"doc\":\"Data Offset\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** interface name */
  @Deprecated public java.lang.String sourceName;
  /** external system ID */
  @Deprecated public java.lang.String externalSystemID;
  /** Data Offset */
  @Deprecated public long dataOffset;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public detectionEvent() {}

  /**
   * All-args constructor.
   * @param sourceName interface name
   * @param externalSystemID external system ID
   * @param dataOffset Data Offset
   */
  public detectionEvent(java.lang.String sourceName, java.lang.String externalSystemID, java.lang.Long dataOffset) {
    this.sourceName = sourceName;
    this.externalSystemID = externalSystemID;
    this.dataOffset = dataOffset;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sourceName;
    case 1: return externalSystemID;
    case 2: return dataOffset;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sourceName = (java.lang.String)value$; break;
    case 1: externalSystemID = (java.lang.String)value$; break;
    case 2: dataOffset = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sourceName' field.
   * @return interface name
   */
  public java.lang.String getSourceName() {
    return sourceName;
  }

  /**
   * Sets the value of the 'sourceName' field.
   * interface name
   * @param value the value to set.
   */
  public void setSourceName(java.lang.String value) {
    this.sourceName = value;
  }

  /**
   * Gets the value of the 'externalSystemID' field.
   * @return external system ID
   */
  public java.lang.String getExternalSystemID() {
    return externalSystemID;
  }

  /**
   * Sets the value of the 'externalSystemID' field.
   * external system ID
   * @param value the value to set.
   */
  public void setExternalSystemID(java.lang.String value) {
    this.externalSystemID = value;
  }

  /**
   * Gets the value of the 'dataOffset' field.
   * @return Data Offset
   */
  public java.lang.Long getDataOffset() {
    return dataOffset;
  }

  /**
   * Sets the value of the 'dataOffset' field.
   * Data Offset
   * @param value the value to set.
   */
  public void setDataOffset(java.lang.Long value) {
    this.dataOffset = value;
  }

  /**
   * Creates a new detectionEvent RecordBuilder.
   * @return A new detectionEvent RecordBuilder
   */
  public static org.sourcestream.entities.detectionEvent.Builder newBuilder() {
    return new org.sourcestream.entities.detectionEvent.Builder();
  }

  /**
   * Creates a new detectionEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new detectionEvent RecordBuilder
   */
  public static org.sourcestream.entities.detectionEvent.Builder newBuilder(org.sourcestream.entities.detectionEvent.Builder other) {
    return new org.sourcestream.entities.detectionEvent.Builder(other);
  }

  /**
   * Creates a new detectionEvent RecordBuilder by copying an existing detectionEvent instance.
   * @param other The existing instance to copy.
   * @return A new detectionEvent RecordBuilder
   */
  public static org.sourcestream.entities.detectionEvent.Builder newBuilder(org.sourcestream.entities.detectionEvent other) {
    return new org.sourcestream.entities.detectionEvent.Builder(other);
  }

  /**
   * RecordBuilder for detectionEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<detectionEvent>
    implements org.apache.avro.data.RecordBuilder<detectionEvent> {

    /** interface name */
    private java.lang.String sourceName;
    /** external system ID */
    private java.lang.String externalSystemID;
    /** Data Offset */
    private long dataOffset;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.sourcestream.entities.detectionEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sourceName)) {
        this.sourceName = data().deepCopy(fields()[0].schema(), other.sourceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.externalSystemID)) {
        this.externalSystemID = data().deepCopy(fields()[1].schema(), other.externalSystemID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataOffset)) {
        this.dataOffset = data().deepCopy(fields()[2].schema(), other.dataOffset);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing detectionEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(org.sourcestream.entities.detectionEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sourceName)) {
        this.sourceName = data().deepCopy(fields()[0].schema(), other.sourceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.externalSystemID)) {
        this.externalSystemID = data().deepCopy(fields()[1].schema(), other.externalSystemID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataOffset)) {
        this.dataOffset = data().deepCopy(fields()[2].schema(), other.dataOffset);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'sourceName' field.
      * interface name
      * @return The value.
      */
    public java.lang.String getSourceName() {
      return sourceName;
    }

    /**
      * Sets the value of the 'sourceName' field.
      * interface name
      * @param value The value of 'sourceName'.
      * @return This builder.
      */
    public org.sourcestream.entities.detectionEvent.Builder setSourceName(java.lang.String value) {
      validate(fields()[0], value);
      this.sourceName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceName' field has been set.
      * interface name
      * @return True if the 'sourceName' field has been set, false otherwise.
      */
    public boolean hasSourceName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sourceName' field.
      * interface name
      * @return This builder.
      */
    public org.sourcestream.entities.detectionEvent.Builder clearSourceName() {
      sourceName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalSystemID' field.
      * external system ID
      * @return The value.
      */
    public java.lang.String getExternalSystemID() {
      return externalSystemID;
    }

    /**
      * Sets the value of the 'externalSystemID' field.
      * external system ID
      * @param value The value of 'externalSystemID'.
      * @return This builder.
      */
    public org.sourcestream.entities.detectionEvent.Builder setExternalSystemID(java.lang.String value) {
      validate(fields()[1], value);
      this.externalSystemID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'externalSystemID' field has been set.
      * external system ID
      * @return True if the 'externalSystemID' field has been set, false otherwise.
      */
    public boolean hasExternalSystemID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'externalSystemID' field.
      * external system ID
      * @return This builder.
      */
    public org.sourcestream.entities.detectionEvent.Builder clearExternalSystemID() {
      externalSystemID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataOffset' field.
      * Data Offset
      * @return The value.
      */
    public java.lang.Long getDataOffset() {
      return dataOffset;
    }

    /**
      * Sets the value of the 'dataOffset' field.
      * Data Offset
      * @param value The value of 'dataOffset'.
      * @return This builder.
      */
    public org.sourcestream.entities.detectionEvent.Builder setDataOffset(long value) {
      validate(fields()[2], value);
      this.dataOffset = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dataOffset' field has been set.
      * Data Offset
      * @return True if the 'dataOffset' field has been set, false otherwise.
      */
    public boolean hasDataOffset() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dataOffset' field.
      * Data Offset
      * @return This builder.
      */
    public org.sourcestream.entities.detectionEvent.Builder clearDataOffset() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public detectionEvent build() {
      try {
        detectionEvent record = new detectionEvent();
        record.sourceName = fieldSetFlags()[0] ? this.sourceName : (java.lang.String) defaultValue(fields()[0]);
        record.externalSystemID = fieldSetFlags()[1] ? this.externalSystemID : (java.lang.String) defaultValue(fields()[1]);
        record.dataOffset = fieldSetFlags()[2] ? this.dataOffset : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
