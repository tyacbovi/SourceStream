/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.sourcestream.entities;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Location attribute in grid format */
@org.apache.avro.specific.AvroGenerated
public class coordinate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3234957827819814865L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"coordinate\",\"namespace\":\"org.sourcestream.entities\",\"doc\":\"Location attribute in grid format\",\"fields\":[{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"long\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double lat;
  @Deprecated public double long$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public coordinate() {}

  /**
   * All-args constructor.
   * @param lat The new value for lat
   * @param long$ The new value for long
   */
  public coordinate(java.lang.Double lat, java.lang.Double long$) {
    this.lat = lat;
    this.long$ = long$;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lat;
    case 1: return long$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lat = (java.lang.Double)value$; break;
    case 1: long$ = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lat' field.
   * @return The value of the 'lat' field.
   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(java.lang.Double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'long$' field.
   * @return The value of the 'long$' field.
   */
  public java.lang.Double getLong$() {
    return long$;
  }

  /**
   * Sets the value of the 'long$' field.
   * @param value the value to set.
   */
  public void setLong$(java.lang.Double value) {
    this.long$ = value;
  }

  /**
   * Creates a new coordinate RecordBuilder.
   * @return A new coordinate RecordBuilder
   */
  public static org.sourcestream.entities.coordinate.Builder newBuilder() {
    return new org.sourcestream.entities.coordinate.Builder();
  }

  /**
   * Creates a new coordinate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new coordinate RecordBuilder
   */
  public static org.sourcestream.entities.coordinate.Builder newBuilder(org.sourcestream.entities.coordinate.Builder other) {
    return new org.sourcestream.entities.coordinate.Builder(other);
  }

  /**
   * Creates a new coordinate RecordBuilder by copying an existing coordinate instance.
   * @param other The existing instance to copy.
   * @return A new coordinate RecordBuilder
   */
  public static org.sourcestream.entities.coordinate.Builder newBuilder(org.sourcestream.entities.coordinate other) {
    return new org.sourcestream.entities.coordinate.Builder(other);
  }

  /**
   * RecordBuilder for coordinate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<coordinate>
    implements org.apache.avro.data.RecordBuilder<coordinate> {

    private double lat;
    private double long$;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.sourcestream.entities.coordinate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lat)) {
        this.lat = data().deepCopy(fields()[0].schema(), other.lat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.long$)) {
        this.long$ = data().deepCopy(fields()[1].schema(), other.long$);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing coordinate instance
     * @param other The existing instance to copy.
     */
    private Builder(org.sourcestream.entities.coordinate other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.lat)) {
        this.lat = data().deepCopy(fields()[0].schema(), other.lat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.long$)) {
        this.long$ = data().deepCopy(fields()[1].schema(), other.long$);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'lat' field.
      * @return The value.
      */
    public java.lang.Double getLat() {
      return lat;
    }

    /**
      * Sets the value of the 'lat' field.
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public org.sourcestream.entities.coordinate.Builder setLat(double value) {
      validate(fields()[0], value);
      this.lat = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lat' field.
      * @return This builder.
      */
    public org.sourcestream.entities.coordinate.Builder clearLat() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'long$' field.
      * @return The value.
      */
    public java.lang.Double getLong$() {
      return long$;
    }

    /**
      * Sets the value of the 'long$' field.
      * @param value The value of 'long$'.
      * @return This builder.
      */
    public org.sourcestream.entities.coordinate.Builder setLong$(double value) {
      validate(fields()[1], value);
      this.long$ = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'long$' field has been set.
      * @return True if the 'long$' field has been set, false otherwise.
      */
    public boolean hasLong$() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'long$' field.
      * @return This builder.
      */
    public org.sourcestream.entities.coordinate.Builder clearLong$() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public coordinate build() {
      try {
        coordinate record = new coordinate();
        record.lat = fieldSetFlags()[0] ? this.lat : (java.lang.Double) defaultValue(fields()[0]);
        record.long$ = fieldSetFlags()[1] ? this.long$ : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
